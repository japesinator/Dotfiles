## SERVERS
servers = (
  # {{{
  {
    address = "irc.nexadmin.com";
    chatnet = "znc";
    port = "32047";
    autoconnect = "true";
    use_ssl = "yes";
    password = NOPE
    # }}}

    ## COMMANDS
    chatnets = {
      # {{{
      znc = { type = "IRC"; };
    };
    # }}}

    ## CHANNELS
    channels = (
      # {{{
    );
    # }}}

    ## ALIASES
    aliases = {
      # {{{
      J = "join";
      WJOIN = "join -window";
      WQUERY = "query -window";
      LEAVE = "part";
      P = "part";
      BYE = "quit";
      EXIT = "quit";
      SIGNOFF = "quit";
      DESCRIBE = "action";
      DATE = "time";
      HOST = "userhost";
      LAST = "lastlog";
      SAY = "msg *";
      WI = "whois";
      WII = "whois $0 $0";
      WW = "whowas";
      W = "window";
      N = "names";
      M = "msg";
      T = "topic";
      C = "clear";
      CL = "clear";
      K = "kick";
      KB = "kickban";
      KN = "knockout";
      BANS = "ban";
      B = "ban";
      MUB = "unban *";
      UB = "unban";
      IG = "ignore";
      UNIG = "unignore";
      SB = "scrollback";
      SH = "exec -";
      UMODE = "mode $N";
      WC = "window close";
      WN = "window new hide";
      WS = "window show";
      WK = "window stick";
      WM = "window move";
      WG = "window grow";
      WL = "window list";
      SV = "say Irssi $J ($V) - http://irssi.org/";
      GOTO = "sb goto";
      CHAT = "dcc chat";
      RUN = "SCRIPT LOAD";
      UPTIME = "eval exec - expr `date +%s` - \\$F | awk '{print \"Irssi uptime: \"int(\\\\\\$1/3600/24)\"d \"int(\\\\\\$1/3600%24)\"h \"int(\\\\\\$1/60%60)\"m \"int(\\\\\\$1%60)\"s\" }'";
      CALC = "exec - if which bc &>/dev/null\\; then echo '$*' | bc | awk '{print \"$*=\"$$1}'\\; else echo bc was not found\\; fi";
      SBAR = "STATUSBAR";
      INVITELIST = "mode $C +I";
      Q = "QUIT";
      QU = "QUERY";
      UQ = "UNQUERY";
    };
    # }}}

    ## STATUSBAR
    statusbar = {
      # {{{
      # formats:
      # when using {templates}, the template is shown only if it's argument isn't
      # empty unless no argument is given. for example {sb} is printed always,
      # but {sb $T} is printed only if $T isn't empty.

      items = {
        # start/end text in statusbars
        barstart = "";
        barend = "";

        topicbarstart = "{topicsbstart}";
        topicbarend = "{topicsbend}";

        # treated "normally", you could change the time/user name to whatever
        time = "{sb $Z}";
        user = "{sb {sbnickmode $cumode}$N{sbmode $usermode}{sbaway $A}}";

        # treated specially .. window is printed with non-empty windows,
        # window_empty is printed with empty windows
        window = "{sb $winref:$tag/$itemname{sbmode $M}}";
        window_empty = "{sb $winref{sbservertag $tag}}";
        prompt = "{prompt $[.15]itemname}";
        prompt_empty = "{prompt $winname}";
        topic = " $topic";
        topic_empty = " Irssi v$J - http://www.irssi.org";

        # all of these treated specially, they're only displayed when needed
        lag = "{sb Lag: $0-}";
        act = "{sb Act: $0-}";
        more = "-- more --";
      };

      # there's two type of statusbars. root statusbars are either at the top
      # of the screen or at the bottom of the screen. window statusbars are at
      # the top/bottom of each split window in screen.
      default = {
        # the "default statusbar" to be displayed at the bottom of the window.
        # contains all the normal items.
        window = {
          disabled = "yes";

          # window, root
          type = "window";
          # top, bottom
          placement = "bottom";
          # number
          position = "1";
          # active, inactive, always
          visible = "active";

          # list of items in statusbar in the display order
          items = {
            barstart = { priority = "100"; };
            time = { };
            user = { };
            window = { };
            window_empty = { };
            lag = { priority = "-1"; };
            act = { priority = "10"; };
            more = { priority = "-1"; alignment = "right"; };
            barend = { priority = "100"; alignment = "right"; };
          };
        };

        # statusbar to use in inactive split windows
        window_inact = {
          type = "window";
          placement = "bottom";
          position = "1";
          visible = "inactive";
          items = {
            barstart = { priority = "100"; };
            window = { };
            window_empty = { };
            more = { priority = "-1"; alignment = "right"; };
            barend = { priority = "100"; alignment = "right"; };
          };
        };

        # we treat input line as yet another statusbar :) It's possible to
        # add other items before or after the input line item.
        prompt = {
          type = "root";
          placement = "bottom";
          # we want to be at the bottom always
          position = "100";
          visible = "always";
          items = {
            prompt = { priority = "-1"; };
            prompt_empty = { priority = "-1"; };
            # treated specially, this is the real input line.
            input = { priority = "10"; };
          };
        };

        # topicbar
        topic = {
          type = "root";
          placement = "top";
          position = "1";
          visible = "inactive";
          items = {
            topicbarstart = { priority = "100"; };
            topic = { };
            topic_empty = { };
            topicbarend = { priority = "100"; alignment = "right"; };
          };
          disabled = "yes";
        };
        void_topic = { placement = "top"; position = "0"; };
        void_status = { placement = "top"; position = "100"; };
        void_bottom = { 
          placement = "bottom";
          items = { };
          position = "1";
        };
        awl_0 = {
          placement = "top";
          items = {
            barstart = { priority = "100"; };
            awl_0 = { };
            barend = { priority = "100"; alignment = "right"; };
          };
        };
      };
    };
    #Â }}}

    ## FORMAT
    settings = {
      # {{{
      core = {
        real_name = "JP";
        user_name = "japesinator";
        nick = "japesinator-freenode";
        timestamp_format = "%H.%M";
        quit_message = "int random() { return 3; /*number randomly chosen with a dice roll*/ }";
      };

      "fe-text" = { scrollback_time = "48h"; actlist_sort = "refnum"; };

      "fe-common/core" = {
        autolog = "yes";
        autolog_path = "~/var/log/irc/%Y/$tag/$0.%m-%d.log";
        theme = "minimal.theme";
        bell_beeps = "yes";
        beep_msg_level = "MSGS NOTICES INVITES DCC DCCMSGS HILIGHT";
        use_status_window = "no";
        expand_escapes = "yes";
      };
      "perl/core/scripts" = {
        awl_display_key = "%K$H $C $S";
        awl_display_key_active = "$H %Y$C $S";
        # awl_sort = "refnum";
        # awl_hide_data = "0";
        awl_placement = "top";
        awl_separator = "\\ \\ \\ ";
      };
    };
    # }}}

    ## HILIGHTS
    hilights = (
      # {{{
      { text = "japesinator"; nick = "yes"; word = "no"; }
    );
    # }}}

    logs = { };
    ignores = ( );

  }
);
settings = {
  core = {
    real_name = "JP Smith";
    user_name = "japesinator";
    nick = "japesinator";
    quit_message = "The little man pedalling my computer ran out of protein bars";
  };
  "fe-text" = { actlist_sort = "refnum"; };
  "fe-common/core" = { theme = "minimal"; timestamps = "no"; };
  "perl/core/scripts" = {
    awl_display_key_visible = "$H$C$S";
    awl_display_header = " ";
    awl_display_nokey_visible = "$H$C$S";
    awl_separator = "\\\\ \\\\ \\\\ ";
    awl_all_disable = "yes";
    awl_display_key_active = "$H %K$C $S";
    awl_display_nokey_active = "$H$C Test$S/quit";
    awl_display_key = "$H $C $S";
    awl_block = "-13";
    awl_display_nokey = "[$N]$H$C$S";
    awl_maxlines = "1";
    awl_placement = "top";
    awl_position = "0";
    awl_automode = "emulate_lightbar";
    awl_hide_data = "0";
  };
};
chatnets = { znc = { type = "IRC"; }; };
statusbar = {
  default = {
    window = {
      items = {
        barstart = { priority = "100"; };
        time = { };
        user = { };
        window = { };
        window_empty = { };
        lag = { priority = "-1"; };
        more = { priority = "-1"; alignment = "right"; };
        barend = { priority = "100"; alignment = "right"; };
      };
      disabled = "yes";
    };
    reset = { disabled = "yes"; };
    topic = { disabled = "yes"; };
    add = { disabled = "yes"; };
    line = {
      position = "0";
      placement = "top";
      items = {
        "------------------------------------------------------------------------------" = {
        };
      };
      disabled = "yes";
    };
    window_inact = {
      items = {
        barstart = { priority = "100"; };
        window = { };
        window_empty = { };
        more = { priority = "-1"; alignment = "right"; };
        barend = { priority = "100"; alignment = "right"; };
      };
      disabled = "yes";
    };
    set = { disabled = "yes"; };
    awl_0 = {
      placement = "top";
      items = {
        barstart = { priority = "100"; };
        awl_0 = { };
        barend = { priority = "100"; alignment = "right"; };
      };
    };
  };
};
aliases = {
  wml = "window move left";
  wmr = "window move right";
  q = "msg";
  x = "quit";
  wc = "window close";
};
